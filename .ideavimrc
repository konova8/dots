" leader
map <space> <nop>
let mapleader="\<space>"

" -- NEVER PRESS Q AGAIN
nmap Q <nop>

" -- Page up/down while staying in the middle of the screen
nmap <C-u> <C-u>zz
nmap <C-d> <C-d>zz

" -- Better copy, pasting and deleting experience
" vim.keymap.set({ 'n', 'v' }, '<leader>x', '"+x')
" vim.keymap.set({ 'n', 'v' }, '<leader>Y', '"+Y')

" Better copy, pasting and deleting experience
nmap <leader>y "+y
nmap <leader>p "+p
nmap <leader>d "+d

vmap <leader>y "+y
vmap <leader>p "+p
vmap <leader>d "+d

" make Y behave like D and C, yanking till end of line
map Y y$

" vim settings
set scrolloff=5
set history=1000

" status bar
set showmode

" find and replace
set hlsearch
set incsearch
set ignorecase
set smartcase
set gdefault
nmap <leader>nh :noh<CR>

" Make line numbers default
set number
set relativenumber

" Wrap text
set wrap
set linebreak

" ideavim settings
set ideajoin
set ideamarks
set idearefactormode=normal
"set ideastatusicon=gray

" In visual mode move lines up and down with J and K
vmap J <Action>(MoveLineDown)
vmap K <Action>(MoveLineUp)

" location
nmap <C-i> <Action>(Forward)
nmap <C-o> <Action>(Back)

" Tab Pin
nmap <leader>tp <Action>(PinActiveEditorTab)

" Window managment
nmap <C-k> <C-w>k
nmap <C-j> <C-w>j
nmap <C-h> <C-w>h
nmap <C-l> <C-w>l

" Menu for Code
nmap <leader>mc <Action>(CodeMenu)

" Find Files
nmap <leader>ff <Action>(GotoFile)
" Live Grep (similar to live grep in nvim)
nmap <leader>lg <Action>(FindInPath)

" show Error
nmap <leader>e <Action>(ShowErrorDescription)
" Format Code
nmap <leader>fc <Action>(ReformatCode)
" Format Line
nmap <leader>fl V<Action>(ReformatCode)

" ReRun
nmap <leader>rr <Action>(Rerun)
" Run Tests
nmap <leader>rt <Action>(RunTests)
" Run Stop
nmap <leader>rs <Action>(Stop)

" Run Debug
nmap <leader>rd <Action>(Debug)
" Breakpoint Toggle
nmap <leader>bt <Action>(ToggleLineBreakpoint)
" Breakpoint View
nmap <leader>bv <Action>(ViewBreakpoints)

" ReName
nmap <leader>rn <Action>(RenameElement)
" REfactor
nmap <leader>re <Action>(Refactorings.QuickListPopupAction)
" SafeDelete
nmap <leader>sd <Action>(SafeDelete)
" OptimizeImports
nmap <leader>oi <Action>(OptimizeImports)

" Collapse and Folding
nmap zf <Action>(ExpandCollapseToggleAction)
nmap za <Action>(CollapseAllRegions)
nmap zA <Action>(ExpandAllRegions)

" []
nmap [t <Action>(PreviousTab)
nmap ]t <Action>(NextTab)
nmap [d <Action>(GotoPreviousError)
nmap ]d <Action>(GotoNextError)
nmap [c <Action>(VcsShowPrevChangeMarker)
nmap ]c <Action>(VcsShowNextChangeMarker)

" GOTO
nmap <leader>ga <Action>(GotoAction)
nmap <leader>gc <Action>(GotoClass)
nmap <leader>gf <Action>(GotoFile)
nmap <leader>gs <Action>(GotoSymbol)
nmap <leader>gt <Action>(GotoTest)
nmap <leader>gS <Action>(GotoSuperMethod)
nmap <leader>gd <Action>(GotoDeclaration)
nmap <leader>gD <Action>(GotoTypeDeclaration)
nmap <leader>gi <Action>(GotoImplementation)
nmap <leader>gI <Action>(QuickImplementations)

" open Terminal
nmap <leader>tt <Action>(ActivateTerminalToolWindow)

" Inlay hint
nmap <leader>tih <Action>(ToggleInlayHintsGloballyAction)

" ToDo
nmap <leader>td <Action>(ActivateTODOToolWindow)

" Version Control
nmap <leader>vc <Action>(VcsGroups)
" Show Diff
nmap <leader>sd <Action>(Diff.ShowDiff)

" Reload Ideavim
nmap <leader>ri <Action>(IdeaVim.ReloadVimRc.reload)

" Next and previus result stay in the middle of the screen
" Then unfold what is under the cursor
nmap n nzzzv
nmap N Nzzzv

" text-object (bundle plugin)
set vim-paragraph-motion
set textobj-indent
set textobj-entire
set argtextobj

" highlight yank (bundle plugin)
set highlightedyank
let g:highlightedyank_highlight_duration = "1000"
let g:highlightedyank_highlight_color = "rgba(57, 197, 187, 155)"

" which-key" plugin
set which-key
set notimeout
" let g:WhichKey_ShowVimActions = "true"

" commentary plugin
set commentary